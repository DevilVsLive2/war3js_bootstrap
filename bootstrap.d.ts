// Generated by dts-bundle-generator v8.1.1

import TypedEmitter from 'typed-emitter';
import { EventMap } from 'typed-emitter';

declare global {
	class Console {
		trace(...args: any): void;
		debug(...args: any): void;
		info(...args: any): void;
		warn(...args: any): void;
		error(...args: any): void;
		log(...args: any): void;
	}
	interface HandleEventMap extends EventMap {
		error: (error: Error) => void;
		remove: () => void;
	}
	const Handle_base: new <T_1 extends EventMap>() => TypedEmitter<T_1>;
	class Handle<T extends HandleEventMap = HandleEventMap> extends Handle_base<T> {
		#private;
		constructor(handleHolder: Handle | HandleHolder<string>);
		get handle(): HandleHolder<string>;
		equals(anotherHandle: Handle): boolean;
	}
	interface PlayerEventMap extends HandleEventMap {
	}
	interface Player {
		get handle(): HandleHolder<"player">;
	}
	class Player<T extends PlayerEventMap = PlayerEventMap> extends Handle<T> {
		protected constructor(handleHolder: HandleHolder<"player">);
		static getById<T extends Player = Player>(slot: number): T;
		static localPlayer<T extends Player = Player>(): T;
	}
	interface UnitEventMap extends WidgetEventMap {
		death: (a: string) => void;
		damaging: () => void;
		damaged: () => void;
	}
	class Unit<T extends UnitEventMap = UnitEventMap> extends Widget<T> {
		constructor(arg: Unit | Player, unitId?: number, x?: number, y?: number, facing?: number);
	}
	interface WidgetEventMap extends HandleEventMap {
		death: (a: string) => void;
		damaging: () => void;
		damaged: () => void;
	}
	class Widget<T extends WidgetEventMap = WidgetEventMap> extends Handle<T> {
		constructor(handleHolder: HandleHolder<"widget" | "unit" | "item" | "destructable"> | Unit);
	}
	//const console: Console;
}


